import { createHash } from "node:crypto"
import path from "node:path"
import million from "million/compiler"

import { env } from "./env.js"

const boolVals = {
  true: true,
  false: false,
}

const disableBrowserLogs =
  boolVals[env.DISABLE_BROWSER_LOGS] ?? process.env.NODE_ENV === "production"

const enableMillionJS =
  boolVals[env.ENABLE_MILLION_JS] ?? process.env.NODE_ENV === "production"

/**
 * Run `build` or `dev` with `SKIP_ENV_VALIDATION` to skip env validation. This is especially useful
 * for Docker builds.
 *
 * million.js new version using @million/lint instead of million/compiler. So if any unintentional errors happen, we can roll back
 */

// Temporarily disabled, produces chatty logs
const enablePattyCake = false
// boolVals[env.ENABLE_PATTY_CAKE] ?? process.env.NODE_ENV === 'production'

// Temporarily disabled, enabling causes FOUC on page refreshes
const optimizeCss = false

const getHash = (source, length) =>
  createHash("shake256", { outputLength: length }).update(source).digest("hex")

/** @type {import("next").NextConfig} */
let nextConfig = {
  images: {},
  experimental: {
    optimizeCss,
    webpackBuildWorker: true,
    forceSwcTransforms: true,
    scrollRestoration: true,
    swcPlugins: [
      [
        "next-superjson-plugin",
        {
          excluded: [],
        },
      ],
    ],
  },
  compiler: {
    removeConsole: disableBrowserLogs,
    styledComponents: {
      ssr: true,
      displayName: false,
      pure: true,
      namespace: "Layout",
    },
  },
  webpack(config, { dev }) {
    // Important: return the modified config
    // define class names generated by css-modules
    config.module.rules
      .find(({ oneOf }) => !!oneOf)
      .oneOf.filter(({ use }) => JSON.stringify(use)?.includes("css-loader"))
      .reduce((acc, { use }) => acc.concat(use), [])
      .forEach(({ options }) => {
        if (options?.modules) {
          options.modules.getLocalIdent = (
            { resourcePath },
            localIdentName,
            localName
          ) => {
            const { name } = path.parse(resourcePath)
            const moduleName = name.replace(/\.module/g, "").replace(/\./g, "-")
            return dev
              ? `Sc-${localName}__${getHash(resourcePath, 4)}`
              : `_${getHash(`${resourcePath}${localName}`, 4)}`
          }
        }
      })

    return config
  },
}

const millionConfig = {
  auto: true,
  mute: true,
}

if (enableMillionJS) {
  nextConfig = million.next(nextConfig, millionConfig)
}

export default nextConfig
